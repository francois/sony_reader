#!/usr/bin/env ruby
require "sony_reader"

def usage(message)
  STDERR.puts "ERROR: #{message}\n" unless message.to_s.empty?
  STDERR.puts <<EOF
Usage: #{$0} PATH_TO_READER COMMAND

Where:
  PATH_TO_READER is the path to the root path of the device.

  COMMAND may be one of:

    add --title="Book's Title" --author="Book's Author" --epub="path/to/epub" --cover="path/to/cover"
      Adds an epub to your Reader.
EOF

  exit 1
end

options, nonoptions = ARGV.partition {|arg| arg[0, 2] == "--"}

path_to_reader = nonoptions.shift
usage("No PATH_TO_READER specified") if path_to_reader.to_s.empty?
usage("PATH_TO_READER argument is not a directory: #{path_to_reader.inspect}") unless File.directory?(path_to_reader)

path_to_database = File.join(path_to_reader, "Sony_Reader/database/books.db")
usage("PATH_TO_READER does not contain the book database: #{path_to_database.inspect}") unless File.file?(path_to_database)

db = SonyReader::Database.new(path_to_reader, path_to_database)

result = case command = nonoptions.shift
         when "add"
           params = options.inject({}) {|memo, arg| memo[arg.split("=").first] = arg.split("=").last; memo}
           usage("Missing --title= parameter from add subcommand in #{params.inspect}")  unless params["--title"]
           usage("Missing --author= parameter from add subcommand in #{params.inspect}") unless params["--author"]

           usage("Missing --epub= parameter from add subcommand in #{params.inspect}")   unless params["--epub"]
           usage("Epub file #{params["--epub"].inspect} missing") unless File.file?(params.fetch("--epub"))

           usage("Missing --cover= parameter from add subcommand in #{params.inspect}")  unless params["--cover"]
           usage("Cover file #{params["--cover"].inspect} missing") unless File.file?(params.fetch("--cover"))

           db.add_book(params.fetch("--title"), params.fetch("--author"), params.fetch("--epub"), params.fetch("--cover"))

         when "sync"
           path_to_book_collection = nonoptions.shift
           usage("PATH_TO_BOOK_COLLECTION is not a directory: #{path_to_book_collection.inspect}") unless File.directory?(path_to_book_collection)
           db.sync(path_to_book_collection)

         else
           usage("Unknown command: #{command.inspect}")
         end

# Maybe do something with result?
